import Foundationclass Transport {    var company: String    var model: String    var horsePower: Int    var yearOfManufacture: Int    var listOfOrders: [String] = []        enum EngineType {        case diesel        case petrol        case electric        case gybrid        case hydrogen    }        var engineType: EngineType    var fuelConsumption: Double    var weight: Double        init(company: String, model: String, horsePower: Int, engineType: EngineType, yearOfManufacture: Int, fuelConsumption: Double, weight: Double) {        (self.company, self.model, self.horsePower, self.engineType, self.yearOfManufacture, self.fuelConsumption, self.weight) = (company, model, horsePower, engineType, yearOfManufacture, fuelConsumption, weight)    }        func whichOrderIsLoaded() {        if listOfOrders.isEmpty {            print("No orders that are loaded in the transport")        } else {            listOfOrders.forEach({print("\($0) is loaded")})            }        }        func repairedAndRefueld() {       print("Your transport has been repaired and refueld")    }}class Truck: Transport {    var capasityOfBaggage: Double    var maxWeightOfBaggage: Double    var loadedWeightInTruck = 0.0    var loadedCapasityInTruck = 0.0        enum TruckBody {        case tented //different manufacture goods        case refrigerator //different manufacture goods and perishable products        case cistern // liquids        }            var truckBody : TruckBody        init(company: String, model: String, horsePower: Int, engineType: EngineType, yearOfManufacture: Int, fuelConsumption: Double, weight: Double, capasityOfBaggage: Double, maxWeightOfBaggage: Double, truckBody: TruckBody) {        (self.capasityOfBaggage = capasityOfBaggage, self.maxWeightOfBaggage = maxWeightOfBaggage,        self.truckBody = truckBody)        super.init(company: company, model: model, horsePower: horsePower, engineType: engineType, yearOfManufacture: yearOfManufacture, fuelConsumption: fuelConsumption, weight: weight)    }        func sealingUp() {        print("Sealing up is completed")    }        func truckCheckBody(_ order: OrderWithGoods) -> Bool {                switch order.typeOfGoods {        case .manufactureGoods:            if truckBody == .tented || truckBody == .refrigerator {                print("Your \(order.name) order with manufactured goods is in registration")                return true            } else {                print("You are denied in registration \(order.name) order cause of not matching with type of body and goods")                return false            }                    case .perishableProducts:            if truckBody == .refrigerator {                print("Your \(order.name) order with perishable products is in registration")                return true            } else {                print("You are denied in registration \(order.name) order cause of not matching with type of body and goods")                return false            }                    case .liquids:            if truckBody == .cistern {                print("Your order with liquids is in registration")                return true            } else {                print("You are denied in registration \(order.name) order cause of not matching with type of body and goods")                return false            }        }    }        func truckOrderCheck(_ order: OrderWithGoods) {        if truckCheckBody(order) == true {            if (order.weightOfGoods <= maxWeightOfBaggage && loadedWeightInTruck <= maxWeightOfBaggage) && (order.sizeOfGoods <= capasityOfBaggage && loadedCapasityInTruck <= capasityOfBaggage) {                loadedWeightInTruck += order.weightOfGoods                loadedCapasityInTruck += order.sizeOfGoods                if loadedWeightInTruck <= maxWeightOfBaggage && loadedCapasityInTruck <= capasityOfBaggage {                    listOfOrders.append(order.name)                    repairedAndRefueld()                    sealingUp()                    print("Registration of your \(order.name) order is succeed!")                    print("Transport started from \(order.startPoint).")                }            } else {                print("There is no enough space for \(order.name) order, we cancel it.")            }        }    }        func unloadingGoodsOrder(_ order: OrderWithGoods) {        if !listOfOrders.contains(order.name){            print("You have no such order")        } else {            loadedCapasityInTruck -= order.sizeOfGoods            loadedWeightInTruck -= order.weightOfGoods            print("Your \(order.name) order with \(order.sizeOfGoods) m^3 and \(order.weightOfGoods) kilograms arrived in \(order.endPoint).")            let ordersName = order.name            for order in listOfOrders {                if order == ordersName {                    listOfOrders.filter{ $0 != order }                }            }        }    }        func spañeLeft() {        print("There are \(capasityOfBaggage - loadedCapasityInTruck) m^3 and \(maxWeightOfBaggage - loadedWeightInTruck) kilograms left")    }   }class PassengerCar: Transport {    var personsCapasity: Int    var peoplesCount = 1 // for a driver        init(company: String, model: String, horsePower: Int, engineType: EngineType, yearOfManufacture: Int, fuelConsumption: Double, weight: Double, personsCapasity: Int) {        self.personsCapasity = personsCapasity        super.init(company: company, model: model, horsePower: horsePower, engineType: engineType, yearOfManufacture: yearOfManufacture, fuelConsumption: fuelConsumption, weight: weight)    }        func cleaning() {        print("Your transport has been cleaned")    }        func passengersOrderCheck(_ order: OrderWithPassengers) {        if order.amountOfPassengers <= personsCapasity && peoplesCount <= personsCapasity {            peoplesCount += order.amountOfPassengers            if peoplesCount <= personsCapasity {                listOfOrders.append(order.name)                repairedAndRefueld()                cleaning()                print("Registration of your \(order.name) order is succeed!")                print("Transport started from \(order.startPoint).")            }        } else {            print("There is no enough space for \(order.name) order, we cancel it.")        }    }        func unloadingPassengersOrder(_ order: OrderWithPassengers) {        if !listOfOrders.contains(order.name) {            print("You have no such orders")        } else {            print("Your \(order.amountOfPassengers) passengers arrived in \(order.endPoint).")            peoplesCount -= order.amountOfPassengers            let ordersName = order.name            for order in listOfOrders {                if order == ordersName {                    listOfOrders.filter{ $0 != order }                }            }        }    }        func sitsLeft() {        print("There are \(personsCapasity - peoplesCount) sits left")    }}class TruckWithPassengers: Truck {    var personsCapasity: Int    var peoplesCount = 1 // for a driver        init(company: String, model: String, horsePower: Int, engineType: EngineType, yearOfManufacture: Int, fuelConsumption: Double, weight: Double, capasityOfBaggage: Double, maxWeightOfBaggage: Double, personsCapasity: Int, truckBody: TruckBody) {        self.personsCapasity = personsCapasity        super.init(company: company, model: model, horsePower: horsePower, engineType: engineType,yearOfManufacture: yearOfManufacture, fuelConsumption: fuelConsumption, weight: weight, capasityOfBaggage: capasityOfBaggage, maxWeightOfBaggage: maxWeightOfBaggage, truckBody: truckBody)    }        func cleaning() {        print("Your transport has been cleaned")    }        func orderWithPassengersCheck(_ order: OrderWithPassengers) {        if order.amountOfPassengers <= personsCapasity && peoplesCount <= personsCapasity {            peoplesCount += order.amountOfPassengers            if peoplesCount <= personsCapasity {                listOfOrders.append(order.name)                cleaning()                print("Registration of your \(order.name) order is succeed!")                print("Transport started from \(order.startPoint).")            }        } else {            print("There is no enough space for \(order.name) order, we cancel it.")        }    }        func unloadingPassengersOrder(_ order: OrderWithPassengers) {        if !listOfOrders.contains(order.name) {            print("You have no such order ")        } else {            peoplesCount -= order.amountOfPassengers            print("Your \(order.amountOfPassengers) passengers arrived in \(order.endPoint).")            let ordersName = order.name            for order in listOfOrders {                if order == ordersName {                    listOfOrders.filter{ $0 != order }                }            }        }    }    func sitsLeft() {        print("There are \(personsCapasity - peoplesCount) sits left")    }    }class OrderWithGoods {    var name: String    var startPoint: String    var endPoint: String    var sizeOfGoods: Double    var weightOfGoods: Double            enum TypeOfGoods {        case manufactureGoods        case perishableProducts        case liquids    }        var typeOfGoods: TypeOfGoods        init(name: String, startPoint: String, endPoint: String, sizeOfGoods: Double, weightOfGoods: Double, typeOfGoods: TypeOfGoods ) {        (self.name, self.startPoint, self.endPoint, self.sizeOfGoods, self.weightOfGoods, self.typeOfGoods) = (name, startPoint, endPoint, sizeOfGoods, weightOfGoods, typeOfGoods)        }    }struct OrderWithPassengers {    let name: String    let startPoint: String    let endPoint: String    let amountOfPassengers: Int}//çàêàç íà òîâàðûlet firstOrder = OrderWithGoods(name: "Evrotorg delivery", startPoint: "Minsk", endPoint: "Grodno", sizeOfGoods: 10, weightOfGoods: 3000, typeOfGoods: .manufactureGoods)//ãðóçîâèêlet firstCar = Truck(company: "Mersedes-Benz", model: "Actros", horsePower: 625, engineType: .diesel, yearOfManufacture: 2022, fuelConsumption: 20.0, weight: 10000, capasityOfBaggage: 50.5, maxWeightOfBaggage: 200000, truckBody: .tented)firstCar.truckOrderCheck(firstOrder)firstCar.loadedWeightInTruckfirstCar.loadedCapasityInTruckfirstCar.spañeLeft()firstCar.whichOrderIsLoaded()//ïàññàæèðñêèélet secondCar = PassengerCar(company: "BMW", model: "X7", horsePower: 400, engineType: .diesel, yearOfManufacture: 2021, fuelConsumption: 16.2, weight: 2634, personsCapasity: 7)//çàêàç íà ïàññàæèðîâlet secondOrder = OrderWithPassengers(name: "Neighbourhood Cities", startPoint: "Brest", endPoint: "Pinsk", amountOfPassengers: 4)secondCar.passengersOrderCheck(secondOrder)//çàêàç íà ïàññàæèðîâlet thirdOrder = OrderWithPassengers(name:"Across treep", startPoint: "Braslau", endPoint: "Bobruisk", amountOfPassengers: 1)secondCar.passengersOrderCheck(thirdOrder)secondCar.sitsLeft()secondCar.unloadingPassengersOrder(secondOrder)secondCar.sitsLeft()secondCar.whichOrderIsLoaded()//ãðóçîïàññàæèðñêèélet thirdCar = TruckWithPassengers(company: "Lada", model: "Gazel", horsePower: 313, engineType: .petrol, yearOfManufacture: 2013, fuelConsumption: 12.4, weight: 4050, capasityOfBaggage: 20, maxWeightOfBaggage: 4000, personsCapasity: 6, truckBody: .tented)//ãðóçlet fourthOrder = OrderWithGoods(name: "Gazprom", startPoint: "Moscow", endPoint: "Minsk", sizeOfGoods: 5, weightOfGoods: 200, typeOfGoods: .liquids)// ïàññàæèðûlet fifthOrder = OrderWithPassengers(name: "Imigrants", startPoint: "Algeria", endPoint: "France", amountOfPassengers: 32)//ãðóçlet sixthOrder = OrderWithGoods(name: "Paper", startPoint: "Slutsk", endPoint: "Mogilev", sizeOfGoods: 5, weightOfGoods: 100, typeOfGoods: .manufactureGoods)thirdCar.whichOrderIsLoaded()thirdCar.unloadingPassengersOrder(fifthOrder)thirdCar.spañeLeft()thirdCar.sitsLeft()thirdCar.orderWithPassengersCheck(fifthOrder)thirdCar.truckOrderCheck(fourthOrder)thirdCar.truckOrderCheck(firstOrder)thirdCar.spañeLeft()thirdCar.sitsLeft()thirdCar.whichOrderIsLoaded()thirdCar.unloadingGoodsOrder(fourthOrder)thirdCar.truckOrderCheck(sixthOrder)thirdCar.unloadingGoodsOrder(sixthOrder)thirdCar.unloadingPassengersOrder(fifthOrder)thirdCar.spañeLeft()Output: Your Evrotorg delivery order with manufactured goods is in registrationYour transport has been repaired and refueldSealing up is completedRegistration of your Evrotorg delivery order is succeed!Transport started from Minsk.There are 40.5 m^3 and 197000.0 kilograms leftEvrotorg delivery is loadedYour transport has been repaired and refueldYour transport has been cleanedRegistration of your Neighbourhood Cities order is succeed!Transport started from Brest.Your transport has been repaired and refueldYour transport has been cleanedRegistration of your Across treep order is succeed!Transport started from Braslau.There are 1 sits leftYour 4 passengers arrived in Pinsk.There are 5 sits leftNeighbourhood Cities is loadedAcross treep is loadedNo orders that are loaded in the transportYou have no such order There are 20.0 m^3 and 4000.0 kilograms leftThere are 5 sits leftThere is no enough space for Imigrants order, we cancel it.You are denied in registration Gazprom order cause of not matching with type of body and goodsYour Evrotorg delivery order with manufactured goods is in registrationYour transport has been repaired and refueldSealing up is completedRegistration of your Evrotorg delivery order is succeed!Transport started from Minsk.There are 10.0 m^3 and 1000.0 kilograms leftThere are 5 sits leftEvrotorg delivery is loadedYou have no such orderYour Paper order with manufactured goods is in registrationYour transport has been repaired and refueldSealing up is completedRegistration of your Paper order is succeed!Transport started from Slutsk.Your Paper order with 5.0 m^3 and 100.0 kilograms arrived in Mogilev.You have no such order There are 10.0 m^3 and 1000.0 kilograms left